--- Connect to DB
CONNECT sys / password AS SYSDBA;
--- Create admin user
CREATE USER admin IDENTIFIED BY password;
GRANT CONNECT,
    RESOURCE,
    DBA TO admin;
--- Connect admin user
CONNECT admin / password;
--- Create the MOVIES table
CREATE TABLE MOVIES IF NOT EXISTS (
    MovieID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Title VARCHAR2(255) NOT NULL,
    ReleaseDate DATE,
    Duration NUMBER,
    Summary VARCHAR2(4000)
);
-- Create the GENRES table
CREATE TABLE Genres (
    GenreID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GenreName VARCHAR2(100) NOT NULL UNIQUE
);
-- Create the Crew table
CREATE TABLE Crew (
    CrewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(255) NOT NULL,
    DateOfBirth DATE,
    Biography VARCHAR2(4000)
);
-- Create the Roles table
CREATE TABLE Roles (
    RoleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MovieID NUMBER,
    CrewID NUMBER,
    RoleType VARCHAR2(100) NOT NULL,
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID),
    FOREIGN KEY (CrewID) REFERENCES Crew(CrewID)
);
-- Create the MovieGenres table (junction table for many-to-many relationship)
CREATE TABLE MovieGenres (
    MovieID NUMBER,
    GenreID NUMBER,
    PRIMARY KEY (MovieID, GenreID),
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID),
    FOREIGN KEY (GenreID) REFERENCES Genres(GenreID)
);
-- Create the UserReviews table
CREATE TABLE UserReviews (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MovieID NUMBER,
    UserID NUMBER,
    Rating NUMBER(2,1) CHECK (Rating BETWEEN 1 AND 10),
    ReviewText VARCHAR2(4000),
    ReviewDate DATE DEFAULT SYSDATE,
    FOREIGN KEY (MovieID) REFERENCES Movies(MovieID)
);
-- Create sequence for MovieID
CREATE SEQUENCE MovieIDSeq START WITH 100000 INCREMENT BY 1;

-- Create sequence for UserID
CREATE SEQUENCE UserIDSeq START WITH 100000 INCREMENT BY 1;

-- Create sequence for ReviewID
CREATE SEQUENCE ReviewIDSeq START WITH 100000 INCREMENT BY 1;

-- Trigger to validate review scores
CREATE OR REPLACE TRIGGER ValidateReviewScore
BEFORE INSERT ON UserReviews
FOR EACH ROW
BEGIN
    IF :NEW.Rating NOT BETWEEN 1 AND 10 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Rating must be between 1 and 10');
    END IF;
END;
/

-- Trigger to log changes to movie information
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MovieID NUMBER,
    Action VARCHAR2(100),
    ChangedBy VARCHAR2(100),
    ChangeDate DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER LogMovieChanges
AFTER INSERT OR UPDATE OR DELETE ON Movies
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AuditLog (MovieID, Action, ChangedBy) VALUES (:NEW.MovieID, 'INSERT', USER);
    ELSIF UPDATING THEN
        INSERT INTO AuditLog (MovieID, Action, ChangedBy) VALUES (:NEW.MovieID, 'UPDATE', USER);
    ELSIF DELETING THEN
        INSERT INTO AuditLog (MovieID, Action, ChangedBy) VALUES (:OLD.MovieID, 'DELETE', USER);
    END IF;
END;
/
CREATE OR REPLACE PROCEDURE AddNewMovie (
    p_Title VARCHAR2,
    p_ReleaseDate DATE,
    p_Duration NUMBER,
    p_Summary VARCHAR2,
    p_Genres VARCHAR2, -- Comma-separated list of genre names
    p_CrewMembers SYS.ODCIVARCHAR2LIST -- List of (Name, RoleType) pairs
) AS
    v_MovieID NUMBER;
    v_GenreID NUMBER;
    v_CrewID NUMBER;
    v_GenreName VARCHAR2(100);
    v_Name VARCHAR2(255);
    v_RoleType VARCHAR2(100);
BEGIN
    -- Insert the new movie
    INSERT INTO Movies (Title, ReleaseDate, Duration, Summary)
    VALUES (p_Title, p_ReleaseDate, p_Duration, p_Summary)
    RETURNING MovieID INTO v_MovieID;

    -- Insert genres
    FOR genre IN (SELECT TRIM(REGEXP_SUBSTR(p_Genres, '[^,]+', 1, LEVEL)) AS GenreName
                  FROM DUAL
                  CONNECT BY REGEXP_SUBSTR(p_Genres, '[^,]+', 1, LEVEL) IS NOT NULL)
    LOOP
        v_GenreName := genre.GenreName;
        BEGIN
            SELECT GenreID INTO v_GenreID FROM Genres WHERE GenreName = v_GenreName;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                INSERT INTO Genres (GenreName) VALUES (v_GenreName) RETURNING GenreID INTO v_GenreID;
        END;
        INSERT INTO MovieGenres (MovieID, GenreID) VALUES (v_MovieID, v_GenreID);
    END LOOP;

    -- Insert crew members and roles
    FOR i IN 1..p_CrewMembers.COUNT LOOP
        v_Name := p_CrewMembers(i)(1);
        v_RoleType := p_CrewMembers(i)(2);
        BEGIN
            SELECT CrewID INTO v_CrewID FROM Crew WHERE Name = v_Name;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                INSERT INTO Crew (Name) VALUES (v_Name) RETURNING CrewID INTO v_CrewID;
        END;
        INSERT INTO Roles (MovieID, CrewID, RoleType) VALUES (v_MovieID, v_CrewID, v_RoleType);
    END LOOP;
END AddNewMovie;
/
-- View for top movies by genre
CREATE OR REPLACE VIEW TopMoviesByGenre AS
SELECT g.GenreName, m.Title, AVG(r.Rating) AS AverageRating
FROM Movies m
JOIN MovieGenres mg ON m.MovieID = mg.MovieID
JOIN Genres g ON mg.GenreID = g.GenreID
JOIN UserReviews r ON m.MovieID = r.MovieID
GROUP BY g.GenreName, m.Title
ORDER BY g.GenreName, AverageRating DESC;

-- View for movies with the highest user scores
CREATE OR REPLACE VIEW HighestRatedMovies AS
SELECT m.Title, AVG(AVG(r.Rating)) AS AverageRating
FROM Movies m
JOIN UserReviews r ON m.MovieID = r.MovieID
GROUP BY m.Title
ORDER BY AverageRating DESC;

-- Create roles
CREATE ROLE ADMIN;
CREATE ROLE CONTRIBUTOR;
CREATE ROLE API_ACCESS;

-- Grant privileges to roles
GRANT SELECT, INSERT, UPDATE, DELETE ON Movies TO ADMIN, CONTRIBUTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON Crew TO ADMIN, CONTRIBUTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON Genres TO ADMIN, CONTRIBUTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON Roles TO ADMIN, CONTRIBUTOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON UserReviews TO ADMIN, CONTRIBUTOR;
GRANT SELECT ON Movies TO API_ACCESS;
GRANT SELECT ON Genres TO API_ACCESS;

-- Grant roles to users
GRANT ADMIN TO admin_user;
GRANT CONTRIBUTOR TO contributor_user;
GRANT API_ACCESS TO api_user;

-- Set default roles
ALTER USER admin_user DEFAULT ROLE ADMIN;
ALTER USER contributor_user DEFAULT ROLE CONTRIBUTOR;
ALTER USER api_user DEFAULT ROLE API_ACCESS;
